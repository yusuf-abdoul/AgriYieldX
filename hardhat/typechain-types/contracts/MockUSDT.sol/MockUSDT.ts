/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockUSDTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createFungibleToken"
      | "decimals"
      | "faucet"
      | "faucetAmount"
      | "faucetCooldown"
      | "grantKYC"
      | "lastClaim"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "revokeKYC"
      | "symbol"
      | "tokenAddress"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FaucetClaimed"
      | "FungibleCreated"
      | "KYCGranted"
      | "KYCRevoked"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createFungibleToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "faucet", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "faucetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faucetCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantKYC",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeKYC",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFungibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "faucet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "faucetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faucetCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantKYC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeKYC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FaucetClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FungibleCreatedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCGrantedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCRevokedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockUSDT extends BaseContract {
  connect(runner?: ContractRunner | null): MockUSDT;
  waitForDeployment(): Promise<this>;

  interface: MockUSDTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFungibleToken: TypedContractMethod<[], [void], "payable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  faucet: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  faucetAmount: TypedContractMethod<[], [bigint], "view">;

  faucetCooldown: TypedContractMethod<[], [bigint], "view">;

  grantKYC: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  lastClaim: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeKYC: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFungibleToken"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "faucet"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "faucetAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "faucetCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantKYC"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastClaim"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeKYC"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FaucetClaimed"
  ): TypedContractEvent<
    FaucetClaimedEvent.InputTuple,
    FaucetClaimedEvent.OutputTuple,
    FaucetClaimedEvent.OutputObject
  >;
  getEvent(
    key: "FungibleCreated"
  ): TypedContractEvent<
    FungibleCreatedEvent.InputTuple,
    FungibleCreatedEvent.OutputTuple,
    FungibleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "KYCGranted"
  ): TypedContractEvent<
    KYCGrantedEvent.InputTuple,
    KYCGrantedEvent.OutputTuple,
    KYCGrantedEvent.OutputObject
  >;
  getEvent(
    key: "KYCRevoked"
  ): TypedContractEvent<
    KYCRevokedEvent.InputTuple,
    KYCRevokedEvent.OutputTuple,
    KYCRevokedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FaucetClaimed(address,uint256)": TypedContractEvent<
      FaucetClaimedEvent.InputTuple,
      FaucetClaimedEvent.OutputTuple,
      FaucetClaimedEvent.OutputObject
    >;
    FaucetClaimed: TypedContractEvent<
      FaucetClaimedEvent.InputTuple,
      FaucetClaimedEvent.OutputTuple,
      FaucetClaimedEvent.OutputObject
    >;

    "FungibleCreated(address)": TypedContractEvent<
      FungibleCreatedEvent.InputTuple,
      FungibleCreatedEvent.OutputTuple,
      FungibleCreatedEvent.OutputObject
    >;
    FungibleCreated: TypedContractEvent<
      FungibleCreatedEvent.InputTuple,
      FungibleCreatedEvent.OutputTuple,
      FungibleCreatedEvent.OutputObject
    >;

    "KYCGranted(address)": TypedContractEvent<
      KYCGrantedEvent.InputTuple,
      KYCGrantedEvent.OutputTuple,
      KYCGrantedEvent.OutputObject
    >;
    KYCGranted: TypedContractEvent<
      KYCGrantedEvent.InputTuple,
      KYCGrantedEvent.OutputTuple,
      KYCGrantedEvent.OutputObject
    >;

    "KYCRevoked(address)": TypedContractEvent<
      KYCRevokedEvent.InputTuple,
      KYCRevokedEvent.OutputTuple,
      KYCRevokedEvent.OutputObject
    >;
    KYCRevoked: TypedContractEvent<
      KYCRevokedEvent.InputTuple,
      KYCRevokedEvent.OutputTuple,
      KYCRevokedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
