/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Marketplace {
  export type ListingStruct = {
    farmId: BigNumberish;
    farmer: AddressLike;
    price: BigNumberish;
    quantity: BigNumberish;
    quantityRemaining: BigNumberish;
    metadataCID: string;
    isActive: boolean;
  };

  export type ListingStructOutput = [
    farmId: bigint,
    farmer: string,
    price: bigint,
    quantity: bigint,
    quantityRemaining: bigint,
    metadataCID: string,
    isActive: boolean
  ] & {
    farmId: bigint;
    farmer: string;
    price: bigint;
    quantity: bigint;
    quantityRemaining: bigint;
    metadataCID: string;
    isActive: boolean;
  };

  export type OrderStruct = {
    listingId: BigNumberish;
    buyer: AddressLike;
    seller: AddressLike;
    price: BigNumberish;
    quantity: BigNumberish;
    shippingCID: string;
    proofCID: string;
    status: BigNumberish;
    isDisputed: boolean;
    disputeReasonCID: string;
  };

  export type OrderStructOutput = [
    listingId: bigint,
    buyer: string,
    seller: string,
    price: bigint,
    quantity: bigint,
    shippingCID: string,
    proofCID: string,
    status: bigint,
    isDisputed: boolean,
    disputeReasonCID: string
  ] & {
    listingId: bigint;
    buyer: string;
    seller: string;
    price: bigint;
    quantity: bigint;
    shippingCID: string;
    proofCID: string;
    status: bigint;
    isDisputed: boolean;
    disputeReasonCID: string;
  };
}

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agriYield"
      | "confirmReceived"
      | "deactivateListing"
      | "getListing"
      | "getOrder"
      | "listItem"
      | "listings"
      | "nextListingId"
      | "nextOrderId"
      | "openDispute"
      | "orders"
      | "purchase"
      | "releaseFunds"
      | "resolveDispute"
      | "shipOrder"
      | "stableToken"
      | "updateListing"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeOpened"
      | "DisputeResolved"
      | "FundsReleased"
      | "ListingCreated"
      | "ListingDeactivated"
      | "ListingUpdated"
      | "OrderCreated"
      | "OrderReceived"
      | "OrderShipped"
  ): EventFragment;

  encodeFunctionData(functionFragment: "agriYield", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmReceived",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextListingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openDispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shipOrder",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "agriYield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shipOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
}

export namespace DisputeOpenedEvent {
  export type InputTuple = [orderId: BigNumberish, reasonCID: string];
  export type OutputTuple = [orderId: bigint, reasonCID: string];
  export interface OutputObject {
    orderId: bigint;
    reasonCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [orderId: BigNumberish, sellerFavor: boolean];
  export type OutputTuple = [orderId: bigint, sellerFavor: boolean];
  export interface OutputObject {
    orderId: bigint;
    sellerFavor: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderId: bigint, seller: string, amount: bigint];
  export interface OutputObject {
    orderId: bigint;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCreatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    farmId: BigNumberish,
    farmer: AddressLike,
    price: BigNumberish,
    quantity: BigNumberish,
    metadataCID: string
  ];
  export type OutputTuple = [
    listingId: bigint,
    farmId: bigint,
    farmer: string,
    price: bigint,
    quantity: bigint,
    metadataCID: string
  ];
  export interface OutputObject {
    listingId: bigint;
    farmId: bigint;
    farmer: string;
    price: bigint;
    quantity: bigint;
    metadataCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingDeactivatedEvent {
  export type InputTuple = [listingId: BigNumberish];
  export type OutputTuple = [listingId: bigint];
  export interface OutputObject {
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingUpdatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    price: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    price: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    price: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    listingId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    price: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    listingId: bigint,
    buyer: string,
    seller: string,
    price: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    listingId: bigint;
    buyer: string;
    seller: string;
    price: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderReceivedEvent {
  export type InputTuple = [orderId: BigNumberish, proofCID: string];
  export type OutputTuple = [orderId: bigint, proofCID: string];
  export interface OutputObject {
    orderId: bigint;
    proofCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderShippedEvent {
  export type InputTuple = [orderId: BigNumberish, shippingCID: string];
  export type OutputTuple = [orderId: bigint, shippingCID: string];
  export interface OutputObject {
    orderId: bigint;
    shippingCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agriYield: TypedContractMethod<[], [string], "view">;

  confirmReceived: TypedContractMethod<
    [orderId: BigNumberish, proofCID: string],
    [void],
    "nonpayable"
  >;

  deactivateListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [Marketplace.ListingStructOutput],
    "view"
  >;

  getOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [Marketplace.OrderStructOutput],
    "view"
  >;

  listItem: TypedContractMethod<
    [
      farmId: BigNumberish,
      price: BigNumberish,
      quantity: BigNumberish,
      metadataCID: string
    ],
    [bigint],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, string, boolean] & {
        farmId: bigint;
        farmer: string;
        price: bigint;
        quantity: bigint;
        quantityRemaining: bigint;
        metadataCID: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  nextListingId: TypedContractMethod<[], [bigint], "view">;

  nextOrderId: TypedContractMethod<[], [bigint], "view">;

  openDispute: TypedContractMethod<
    [orderId: BigNumberish, reasonCID: string],
    [void],
    "nonpayable"
  >;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        boolean,
        string
      ] & {
        listingId: bigint;
        buyer: string;
        seller: string;
        price: bigint;
        quantity: bigint;
        shippingCID: string;
        proofCID: string;
        status: bigint;
        isDisputed: boolean;
        disputeReasonCID: string;
      }
    ],
    "view"
  >;

  purchase: TypedContractMethod<
    [listingId: BigNumberish, quantity: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  releaseFunds: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [orderId: BigNumberish, sellerFavor: boolean],
    [void],
    "nonpayable"
  >;

  shipOrder: TypedContractMethod<
    [orderId: BigNumberish, shippingCID: string],
    [void],
    "nonpayable"
  >;

  stableToken: TypedContractMethod<[], [string], "view">;

  updateListing: TypedContractMethod<
    [listingId: BigNumberish, price: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agriYield"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "confirmReceived"
  ): TypedContractMethod<
    [orderId: BigNumberish, proofCID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [Marketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [orderId: BigNumberish],
    [Marketplace.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listItem"
  ): TypedContractMethod<
    [
      farmId: BigNumberish,
      price: BigNumberish,
      quantity: BigNumberish,
      metadataCID: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, string, boolean] & {
        farmId: bigint;
        farmer: string;
        price: bigint;
        quantity: bigint;
        quantityRemaining: bigint;
        metadataCID: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextListingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextOrderId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openDispute"
  ): TypedContractMethod<
    [orderId: BigNumberish, reasonCID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        boolean,
        string
      ] & {
        listingId: bigint;
        buyer: string;
        seller: string;
        price: bigint;
        quantity: bigint;
        shippingCID: string;
        proofCID: string;
        status: bigint;
        isDisputed: boolean;
        disputeReasonCID: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<
    [listingId: BigNumberish, quantity: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseFunds"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [orderId: BigNumberish, sellerFavor: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shipOrder"
  ): TypedContractMethod<
    [orderId: BigNumberish, shippingCID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stableToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateListing"
  ): TypedContractMethod<
    [listingId: BigNumberish, price: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DisputeOpened"
  ): TypedContractEvent<
    DisputeOpenedEvent.InputTuple,
    DisputeOpenedEvent.OutputTuple,
    DisputeOpenedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCreated"
  ): TypedContractEvent<
    ListingCreatedEvent.InputTuple,
    ListingCreatedEvent.OutputTuple,
    ListingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingDeactivated"
  ): TypedContractEvent<
    ListingDeactivatedEvent.InputTuple,
    ListingDeactivatedEvent.OutputTuple,
    ListingDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingUpdated"
  ): TypedContractEvent<
    ListingUpdatedEvent.InputTuple,
    ListingUpdatedEvent.OutputTuple,
    ListingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderReceived"
  ): TypedContractEvent<
    OrderReceivedEvent.InputTuple,
    OrderReceivedEvent.OutputTuple,
    OrderReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OrderShipped"
  ): TypedContractEvent<
    OrderShippedEvent.InputTuple,
    OrderShippedEvent.OutputTuple,
    OrderShippedEvent.OutputObject
  >;

  filters: {
    "DisputeOpened(uint256,string)": TypedContractEvent<
      DisputeOpenedEvent.InputTuple,
      DisputeOpenedEvent.OutputTuple,
      DisputeOpenedEvent.OutputObject
    >;
    DisputeOpened: TypedContractEvent<
      DisputeOpenedEvent.InputTuple,
      DisputeOpenedEvent.OutputTuple,
      DisputeOpenedEvent.OutputObject
    >;

    "DisputeResolved(uint256,bool)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "FundsReleased(uint256,address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "ListingCreated(uint256,uint256,address,uint256,uint256,string)": TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;
    ListingCreated: TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;

    "ListingDeactivated(uint256)": TypedContractEvent<
      ListingDeactivatedEvent.InputTuple,
      ListingDeactivatedEvent.OutputTuple,
      ListingDeactivatedEvent.OutputObject
    >;
    ListingDeactivated: TypedContractEvent<
      ListingDeactivatedEvent.InputTuple,
      ListingDeactivatedEvent.OutputTuple,
      ListingDeactivatedEvent.OutputObject
    >;

    "ListingUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ListingUpdatedEvent.InputTuple,
      ListingUpdatedEvent.OutputTuple,
      ListingUpdatedEvent.OutputObject
    >;
    ListingUpdated: TypedContractEvent<
      ListingUpdatedEvent.InputTuple,
      ListingUpdatedEvent.OutputTuple,
      ListingUpdatedEvent.OutputObject
    >;

    "OrderCreated(uint256,uint256,address,address,uint256,uint256)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "OrderReceived(uint256,string)": TypedContractEvent<
      OrderReceivedEvent.InputTuple,
      OrderReceivedEvent.OutputTuple,
      OrderReceivedEvent.OutputObject
    >;
    OrderReceived: TypedContractEvent<
      OrderReceivedEvent.InputTuple,
      OrderReceivedEvent.OutputTuple,
      OrderReceivedEvent.OutputObject
    >;

    "OrderShipped(uint256,string)": TypedContractEvent<
      OrderShippedEvent.InputTuple,
      OrderShippedEvent.OutputTuple,
      OrderShippedEvent.OutputObject
    >;
    OrderShipped: TypedContractEvent<
      OrderShippedEvent.InputTuple,
      OrderShippedEvent.OutputTuple,
      OrderShippedEvent.OutputObject
    >;
  };
}
