/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AgriYield {
  export type FarmStruct = {
    farmer: AddressLike;
    fundingGoal: BigNumberish;
    raised: BigNumberish;
    proceeds: BigNumberish;
    shareSupply: BigNumberish;
    sharePrice: BigNumberish;
    status: BigNumberish;
    metaCID: string;
  };

  export type FarmStructOutput = [
    farmer: string,
    fundingGoal: bigint,
    raised: bigint,
    proceeds: bigint,
    shareSupply: bigint,
    sharePrice: bigint,
    status: bigint,
    metaCID: string
  ] & {
    farmer: string;
    fundingGoal: bigint;
    raised: bigint;
    proceeds: bigint;
    shareSupply: bigint;
    sharePrice: bigint;
    status: bigint;
    metaCID: string;
  };
}

export interface AgriYieldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "claimInvestorPayout"
      | "createFarm"
      | "depositProceeds"
      | "disburseFunds"
      | "farmCount"
      | "farmShares"
      | "farms"
      | "getFarm"
      | "invest"
      | "investorShares"
      | "tokenAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FarmCreated"
      | "FundsDisbursed"
      | "Invested"
      | "InvestorClaimed"
      | "ProceedsDeposited"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimInvestorPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createFarm",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositProceeds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disburseFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "farmCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "farms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getFarm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investorShares",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimInvestorPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farmCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investorShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
}

export namespace FarmCreatedEvent {
  export type InputTuple = [
    farmId: BigNumberish,
    farmer: AddressLike,
    metaCID: string
  ];
  export type OutputTuple = [farmId: bigint, farmer: string, metaCID: string];
  export interface OutputObject {
    farmId: bigint;
    farmer: string;
    metaCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDisbursedEvent {
  export type InputTuple = [farmId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [farmId: bigint, amount: bigint];
  export interface OutputObject {
    farmId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestedEvent {
  export type InputTuple = [
    farmId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    farmId: bigint,
    investor: string,
    amount: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    farmId: bigint;
    investor: string;
    amount: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestorClaimedEvent {
  export type InputTuple = [
    farmId: BigNumberish,
    investor: AddressLike,
    payout: BigNumberish
  ];
  export type OutputTuple = [farmId: bigint, investor: string, payout: bigint];
  export interface OutputObject {
    farmId: bigint;
    investor: string;
    payout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProceedsDepositedEvent {
  export type InputTuple = [farmId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [farmId: bigint, amount: bigint];
  export interface OutputObject {
    farmId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgriYield extends BaseContract {
  connect(runner?: ContractRunner | null): AgriYield;
  waitForDeployment(): Promise<this>;

  interface: AgriYieldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  claimInvestorPayout: TypedContractMethod<
    [farmId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createFarm: TypedContractMethod<
    [
      fundingGoal: BigNumberish,
      shareSupply: BigNumberish,
      sharePrice: BigNumberish,
      metaCID: string
    ],
    [bigint],
    "nonpayable"
  >;

  depositProceeds: TypedContractMethod<
    [farmId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  disburseFunds: TypedContractMethod<
    [farmId: BigNumberish],
    [void],
    "nonpayable"
  >;

  farmCount: TypedContractMethod<[], [bigint], "view">;

  farmShares: TypedContractMethod<[], [string], "view">;

  farms: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        farmer: string;
        fundingGoal: bigint;
        raised: bigint;
        proceeds: bigint;
        shareSupply: bigint;
        sharePrice: bigint;
        status: bigint;
        metaCID: string;
      }
    ],
    "view"
  >;

  getFarm: TypedContractMethod<
    [farmId: BigNumberish],
    [AgriYield.FarmStructOutput],
    "view"
  >;

  invest: TypedContractMethod<
    [farmId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  investorShares: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimInvestorPayout"
  ): TypedContractMethod<[farmId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createFarm"
  ): TypedContractMethod<
    [
      fundingGoal: BigNumberish,
      shareSupply: BigNumberish,
      sharePrice: BigNumberish,
      metaCID: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositProceeds"
  ): TypedContractMethod<
    [farmId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disburseFunds"
  ): TypedContractMethod<[farmId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "farmCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "farmShares"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "farms"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        farmer: string;
        fundingGoal: bigint;
        raised: bigint;
        proceeds: bigint;
        shareSupply: bigint;
        sharePrice: bigint;
        status: bigint;
        metaCID: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFarm"
  ): TypedContractMethod<
    [farmId: BigNumberish],
    [AgriYield.FarmStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<
    [farmId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "investorShares"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FarmCreated"
  ): TypedContractEvent<
    FarmCreatedEvent.InputTuple,
    FarmCreatedEvent.OutputTuple,
    FarmCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDisbursed"
  ): TypedContractEvent<
    FundsDisbursedEvent.InputTuple,
    FundsDisbursedEvent.OutputTuple,
    FundsDisbursedEvent.OutputObject
  >;
  getEvent(
    key: "Invested"
  ): TypedContractEvent<
    InvestedEvent.InputTuple,
    InvestedEvent.OutputTuple,
    InvestedEvent.OutputObject
  >;
  getEvent(
    key: "InvestorClaimed"
  ): TypedContractEvent<
    InvestorClaimedEvent.InputTuple,
    InvestorClaimedEvent.OutputTuple,
    InvestorClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ProceedsDeposited"
  ): TypedContractEvent<
    ProceedsDepositedEvent.InputTuple,
    ProceedsDepositedEvent.OutputTuple,
    ProceedsDepositedEvent.OutputObject
  >;

  filters: {
    "FarmCreated(uint256,address,string)": TypedContractEvent<
      FarmCreatedEvent.InputTuple,
      FarmCreatedEvent.OutputTuple,
      FarmCreatedEvent.OutputObject
    >;
    FarmCreated: TypedContractEvent<
      FarmCreatedEvent.InputTuple,
      FarmCreatedEvent.OutputTuple,
      FarmCreatedEvent.OutputObject
    >;

    "FundsDisbursed(uint256,uint256)": TypedContractEvent<
      FundsDisbursedEvent.InputTuple,
      FundsDisbursedEvent.OutputTuple,
      FundsDisbursedEvent.OutputObject
    >;
    FundsDisbursed: TypedContractEvent<
      FundsDisbursedEvent.InputTuple,
      FundsDisbursedEvent.OutputTuple,
      FundsDisbursedEvent.OutputObject
    >;

    "Invested(uint256,address,uint256,uint256)": TypedContractEvent<
      InvestedEvent.InputTuple,
      InvestedEvent.OutputTuple,
      InvestedEvent.OutputObject
    >;
    Invested: TypedContractEvent<
      InvestedEvent.InputTuple,
      InvestedEvent.OutputTuple,
      InvestedEvent.OutputObject
    >;

    "InvestorClaimed(uint256,address,uint256)": TypedContractEvent<
      InvestorClaimedEvent.InputTuple,
      InvestorClaimedEvent.OutputTuple,
      InvestorClaimedEvent.OutputObject
    >;
    InvestorClaimed: TypedContractEvent<
      InvestorClaimedEvent.InputTuple,
      InvestorClaimedEvent.OutputTuple,
      InvestorClaimedEvent.OutputObject
    >;

    "ProceedsDeposited(uint256,uint256)": TypedContractEvent<
      ProceedsDepositedEvent.InputTuple,
      ProceedsDepositedEvent.OutputTuple,
      ProceedsDepositedEvent.OutputObject
    >;
    ProceedsDeposited: TypedContractEvent<
      ProceedsDepositedEvent.InputTuple,
      ProceedsDepositedEvent.OutputTuple,
      ProceedsDepositedEvent.OutputObject
    >;
  };
}
